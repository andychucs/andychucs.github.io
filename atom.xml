<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://andychucs.github.io</id>
    <title>Andy Blog</title>
    <updated>2024-03-02T04:57:02.025Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://andychucs.github.io"/>
    <link rel="self" href="https://andychucs.github.io/atom.xml"/>
    <subtitle>少即是多</subtitle>
    <logo>https://andychucs.github.io/images/avatar.png</logo>
    <icon>https://andychucs.github.io/favicon.ico</icon>
    <rights>All rights reserved 2024, Andy Blog</rights>
    <entry>
        <title type="html"><![CDATA[Android应用安装失败：Package could not be assigned a valid UID]]></title>
        <id>https://andychucs.github.io/post/android-ying-yong-an-zhuang-shi-bai-package-could-not-be-assigned-a-valid-uid/</id>
        <link href="https://andychucs.github.io/post/android-ying-yong-an-zhuang-shi-bai-package-could-not-be-assigned-a-valid-uid/">
        </link>
        <updated>2023-12-10T09:21:26.000Z</updated>
        <content type="html"><![CDATA[<p>进行Android应用的自动化测试时，遇到一个奇怪的问题：尽管设备上的存储空间充足，但是仍然无法安装新的应用。尝试安装应用时，我们会收到如下错误信息：INSTALL_FAILED_INSUFFICIENT_STORAGE:Package could not be assigned a valid UID。这个错误信息可能会让我们误以为是由于设备的存储空间不足导致的问题，但实际上，问题的根源在于UID资源的耗尽。正常使用很难触及到这个问题，因为我们使用的设备有不同的业务和工具不间断的执行测试，有些设备在上架仅仅一周后就出现了问题，即使删除安装的应用也无法恢复，在没有发现原因之前只能通过刷机来解决。</p>
<h2 id="uid">UID</h2>
<p>在Android系统中，每个应用在安装时都会被分配一个唯一的用户标识符（UID）。UID是一个整数，系统通过这个整数来区分和隔离不同的应用程序。不同的应用会拥有不同的UID，相同的应用在不同的设备上的UID也可能不同。</p>
<p>UID的主要用途是为了在操作系统层面实现应用的隔离。因为每个应用有自己的UID，所以系统可以控制一个应用能访问哪些系统资源，包括文件、网络等。这种基于UID的权限控制机制，是Android系统安全模型的重要组成部分。</p>
<p>在大部分情况下，应用的UID是在应用首次安装时由系统自动分配的。系统会保证每个新安装的应用都能得到一个在当前设备上唯一的UID。Android系统在分配UID时，通常会找到当前已分配的UID的最大值，然后给新应用分配这个最大值+1。然而，UID的数量是有限的，当设备上安装的应用数量过多，使得可用的UID不足时，就会出现无法为新应用分配UID的问题。</p>
<p>在Android系统中，UID的范围是被分配的。在Android的源代码<code>libcutils/include/cutils/misc.h</code>中，我们可以看到这个分配的范围：</p>
<pre><code class="language-c">/* This is the range of UIDs (and GIDs) that are reserved
 * for assigning to applications.
 */
#define FIRST_APPLICATION_UID 10000
#define LAST_APPLICATION_UID 99999
</code></pre>
<p>根据以上的源代码，可供应用程序使用的UID范围是10000到99999。这意味着系统可以支持最多90000个不同的应用程序。</p>
<h2 id="解决方法">解决方法</h2>
<p>在解决过程中，我首先运行了命令 <code>adb shell su -c cat /data/system/packages.list | awk '{print $2}' | sort -n</code>来查看当前系统中所有应用的UID并将它们按数值排序的。删除这个UID对应的应用后重启即可释放这个UID。新安装的应用可以正常安装了。</p>
<p>但是我发现即使删除了所有高UID的应用，新安装的应用依然会占据一个高UID，这说明这个问题并未得到解决。这时，我观察到新应用所处的UID，向前一位的UID应该是需要删除的应用。但是在 packages.list 文件中并不存在这个UID，这说明存在一些&quot;幽灵&quot;应用没有在该文件中列出。仅仅通过查看 packages.list 文件可能是不够的，还需要通过 dumpsys 命令来查找那些没有在 packages.list 文件中列出的&quot;幽灵&quot;应用。</p>
<p>为了找到这些&quot;幽灵&quot;应用，通过 <code>adb shell dumpsys package | grep &lt;UID&gt;</code>命令找到这些&quot;幽灵&quot;应用，之后使用 <code>adb uninstall &lt;package_name&gt;</code> 命令删除这些应用，重启后，设备就能恢复正常。</p>
<p>如果设备没有root，在查找所有应用时可以通过ps找到用户应用的进程ID，再通过进程状态查找该进程对应的UID：</p>
<pre><code>adb shell ps -A | grep u0 
adb shell cat /proc/&lt;PID&gt;/status | grep Uid  
</code></pre>
<h2 id="防止uid资源耗尽">防止UID资源耗尽</h2>
<p>为了避免在未来再次遇到UID资源耗尽的问题，应该定期清理不再需要的应用和&quot;幽灵&quot;应用。例如将上面的过程自动化，在设备接入时将高UID应用删除，根据业务情况来处理即可。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[自动化UI测试中的不可见字符问题]]></title>
        <id>https://andychucs.github.io/post/zi-dong-hua-ui-ce-shi-zhong-de-bu-ke-jian-zi-fu-wen-ti/</id>
        <link href="https://andychucs.github.io/post/zi-dong-hua-ui-ce-shi-zhong-de-bu-ke-jian-zi-fu-wen-ti/">
        </link>
        <updated>2023-12-10T07:48:09.000Z</updated>
        <content type="html"><![CDATA[<p>在自动化UI测试的过程中，我们经常需要对从用户界面获取的字符串进行断言。然而，这个流程可能会因为一些特殊的、不可见的字符而变得复杂。一个常见的例子就是HTML中的非换行空格（NBSP）。在用户界面上，这些字符可能是不可见的，但在HTML源代码或者测试的断言中，却可能会导致测试失败。失败后测试人员很难第一时间发现问题原因，因为这个字符在打印时显示为空白，查阅日志也无法发现异常。本文将讨论这个问题，以及如何在Python语言中解决这个问题。</p>
<h2 id="不可见字符">不可见字符</h2>
<p>在HTML中，NBSP是一种常见的特殊字符，用于控制文本的换行行为。尽管这种字符在前端页面上不显示，但在HTML源代码中，它是可见的。这可能会导致测试用例无法通过，因为预期的字符串和实际的字符串之间有着这种不可见的差异。这样的问题并不仅仅局限于NBSP，还可能包括其他的一些特殊字符，比如制表符（TAB）、换行符（LF）等等。更重要的是，NBSP与普通空格在HTML中的渲染行为不同，这可能导致潜在的页面布局问题。</p>
<h2 id="如何在python中处理这些字符">如何在Python中处理这些字符</h2>
<p>Python提供了一些工具，可以帮助我们处理这些不可见字符。例如，我们可以使用repr()函数，来获取一个对象的字符串表示。这个函数会将字符串中的所有特殊字符，包括NBSP，以转义序列的形式打印出来。</p>
<pre><code class="language-python">print(repr(your_string))
</code></pre>
<p>通过这种方式，NBSP被打印出来，显示为<code>\xa0</code>，我们就可以清楚地看到字符串中的所有内容，包括那些在常规情况下看不见的特殊字符。<br>
<img src="https://andychucs.github.io/post-images/1702195582707.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter不同页面之间互相调用setState的方法]]></title>
        <id>https://andychucs.github.io/post/flutter-bu-tong-ye-mian-zhi-jian-hu-xiang-diao-yong-setstate-de-fang-fa/</id>
        <link href="https://andychucs.github.io/post/flutter-bu-tong-ye-mian-zhi-jian-hu-xiang-diao-yong-setstate-de-fang-fa/">
        </link>
        <updated>2023-08-12T13:47:45.000Z</updated>
        <content type="html"><![CDATA[<p>有时候不同页面之间不是上下层路由关系而是堆叠，子页面状态改变时不会返回，父页面不会重新build，这时需要从子页面去调用父页面的setState来更新。</p>
<h1 id="子页面调用父页面setstate">子页面调用父页面setState</h1>
<p>最简单的方法，在子页面定义一个回调函数。这里是notifyParent，在需要时调用即可。</p>
<pre><code>class ToolsPage extends ConsumerStatefulWidget {
  ToolsPage({Key? key, required this.notifyParent})
      : super(key: key);

  final VoidCallback notifyParent;

  @override
  ConsumerState&lt;ToolsPage&gt; createState() =&gt; _ToolsPageState();
}
</code></pre>
<p>父页面声明时这样声明。</p>
<pre><code class="language-dart">ToolsPage(notifyParent: () =&gt; setState(() {}));
</code></pre>
<h1 id="任意页面之间互相调用setstate">任意页面之间互相调用setState</h1>
<p>页面关系复杂时，可能堆叠、路由都存在，要想让两个不同的孙节点互相更新状态或者导航时，最简单的方法是用provider来管理页面的方法。</p>
<p>下面是使用riverpod的例子。定义一个页面的provider来管理该页面的context和setState方法。就可以在任意页面完成对其他页面的状态更新和导航了。但是这个方法并不好，尤其需要注意被调用的页面是否会被注销，否则会造成内存泄露。还是尽量少用这样的奇技淫巧吧。</p>
<pre><code>import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'navigator_provider.g.dart';


@riverpod
class FunctionLayerNavigator extends _$FunctionLayerNavigator {
  late BuildContext context;
  late Function setState;
  @override
  FunctionLayerNavigator build() {
    return this;
  }

  void init(BuildContext context, Function setState) {
    state.context = context;
    state.setState = setState;
  }

  void push(Widget widget) =&gt;
      Navigator.of(state.context).push(CupertinoPageRoute&lt;Widget&gt;(
        builder: (BuildContext context) {
          return widget;
        },
      ));

  void pop&lt;T extends Object?&gt;([T? result]) =&gt;
      Navigator.of(state.context).pop&lt;T&gt;(result);
}
</code></pre>
<p>使用时，在要管理的页面对provider进行声明和初始化。</p>
<pre><code>  Widget build(BuildContext context) {
    final navigator = ref.watch(functionLayerNavigatorProvider);
    navigator.init(context, () =&gt; setState(() {}));
</code></pre>
<p>调用provider，使用时最好还是在provider内部定义调用state的方法，这样方便在调用前检查是否有初始化，避免产生异常。例如：</p>
<pre><code>  void changeIndex(int index) {
    state.index = index;
    state.setState();
  }

  navigator.changeIndex(1); // GOOD

  navigator.setState(); //BAD
</code></pre>
<h1 id="最佳方案">最佳方案</h1>
<p>上面的方法实际上并不是provider的正确使用方法。</p>
<p>利用riverpod解决这个问题有更合理的方法，我们为什么要在其他widget调用另一个widget的setState呢？因为我们想刷新内部数据，那么我们使用StateProvider就能轻松解决这一问题。例如下面实现themeProvider，就能实在任何组件内容现主题的切换了。</p>
<pre><code>final themeProvider = StateProvider&lt;ThemeMode&gt;((ref) {
  return ThemeMode.system;
});

class MyApp extends ConsumerWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final themeMode = ref.watch(themeProvider);

    return MaterialApp(
      themeMode: themeMode,
    );
  }
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在Android设备上模拟多指手势的方法]]></title>
        <id>https://andychucs.github.io/post/zai-android-she-bei-shang-mo-ni-duo-zhi-shou-shi-de-fang-fa/</id>
        <link href="https://andychucs.github.io/post/zai-android-she-bei-shang-mo-ni-duo-zhi-shou-shi-de-fang-fa/">
        </link>
        <updated>2023-07-22T09:17:00.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>链接Android设备到电脑。</li>
<li>执行adb命令: <code>adb shell getevent</code></li>
<li>此时触控手机屏幕，会看到命令窗口中打印出一堆设备日志。</li>
<li>打印出的/dev/input/event即为该手机的触屏事件。</li>
<li>接下来根据上一步获得的event，修改该命令为该设备的命令：<code>adb shell getevent | grep dev/input/event &gt; events</code></li>
<li>执行上述命令，并在手机上完成你需要的手势操作，完成操作之后关闭命令。</li>
<li>此时我们可以获得一份名为events的操作日志。</li>
<li>我们需要使用上面的日志使用<code>sendevent</code>命令来发送操作事件。但是上面的日志获取到的值为16进制，<code>sendevent</code>所需的参数为10进制，接下来进行转换。</li>
<li>下载该python脚本 <a href="https://gist.github.com/andychucs/ae87688ccea3ff04dd15f4cd8c59e84a">getevent_to_sendevent.py</a></li>
</ol>
<pre><code class="language-python">import os
import sys

filename = sys.argv[-1]

if filename != os.path.abspath(__file__):
   prefix = 'sendevent'
   with open(filename, 'r') as f:
       with open(filename+'.sh', 'w') as fw:
           fw.write('#!/bin/sh\n')
           for line in f.readlines():
               event = line.split(' ')
               device = event[0][:-1]
               _type = '%04d' % int(event[1], 16)
               code = '%04d' % int(event[2], 16)
               value = '%08d' % int(event[3], 16)
               content = f'{prefix} {device} {_type} {code} {value}\n'
               fw.write(content)
</code></pre>
<ol>
<li>运行<code>python getevent_to_sendevent.py events</code>即可生成一个sh文件<code>events.sh</code></li>
<li>执行<code>adb push events.sh /sdcard/events.sh</code></li>
<li>执行<code>adb shell sh /sdcard/events.sh</code></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一键下载CentOS软件包]]></title>
        <id>https://andychucs.github.io/post/yi-jian-xia-zai-centos-ruan-jian-bao/</id>
        <link href="https://andychucs.github.io/post/yi-jian-xia-zai-centos-ruan-jian-bao/">
        </link>
        <updated>2021-12-24T05:46:20.000Z</updated>
        <content type="html"><![CDATA[<p>内网隔离的环境下需要安装软件包，除了自建源之外一个简单可行的方法就是直接从其他设备下载所需软件包，但是诸如centos cbs软件包是没有一键下载整个目录的，这个爬虫脚本就是用于解决这个问题的。直接更换url即可使用。</p>
<pre><code class="language-python">import time

import requests
from bs4 import BeautifulSoup

headers = {
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    'Accept-Encoding': 'gzip, deflate, br',
    'Accept-Language': 'en-US,zh-CN;q=0.8,zh;q=0.7,zh-TW;q=0.5,zh-HK;q=0.3,en;q=0.2',
    'Connection': 'keep-alive',
    'Host': 'cbs.centos.org',
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:79.0) Gecko/20100101 Firefox/79.0'
}
# Assign url to the address of the page you need to download 
url = 'https://cbs.centos.org/kojifiles/packages/ceph/12.2.5/0.el7/aarch64/'


def get_file_list():
    response = session.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    # print(soup)
    rst = []
    for i in soup.find_all('a')[13:]:
        rst.append(i['href'])
    return rst


def format_float(num):
    return '{:.2f}'.format(num)


def download_file(name, u, s):
    r = s.get(u, stream=True)
    length = float(r.headers['content-length'])
    f = open(name, 'wb')
    count = 0
    count_tmp = 0
    time1 = time.time()
    for chunk in r.iter_content(chunk_size=512):
        if chunk:
            f.write(chunk)
            count += len(chunk)
            if time.time() - time1 &gt; 2:
                p = count / length * 100
                speed = (count - count_tmp) / 1024 / 1024 / 2
                count_tmp = count
                print(name + ': ' + format_float(p) + '%' + ' Speed: ' + format_float(speed) + 'M/S')
                time1 = time.time()
    f.close()


if __name__ == '__main__':
    session = requests.Session()
    session.headers = headers
    file_list = get_file_list()
    for i in file_list:
        download_file(i, url + i, session)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu Linux重启指定次数脚本]]></title>
        <id>https://andychucs.github.io/post/linux-chong-qi-zhi-ding-ci-shu-jiao-ben/</id>
        <link href="https://andychucs.github.io/post/linux-chong-qi-zhi-ding-ci-shu-jiao-ben/">
        </link>
        <updated>2021-11-27T10:58:36.000Z</updated>
        <content type="html"><![CDATA[<p>某些时候需要将计算机连续或定时重启，网上的一些代码可以在rhel系的Linux上使用，在Ubuntu系上可能存在问题，下面是我自己写的脚本，专门针对Ubuntu系。</p>
<script src="https://gist.github.com/AndyZhuAZ/5b9f5191c7c92b120609a06746568065.js"></script>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[时之泪——关于光盘的研究：在Linux操作系统上如何使用光驱、光盘与光驱的简单科普]]></title>
        <id>https://andychucs.github.io/post/shi-zhi-lei-guan-yu-guang-pan-de-yan-jiu-zai-linux-cao-zuo-xi-tong-shang-ru-he-shi-yong-guang-qu-guang-pan-yu-guang-qu-de-jian-dan-ke-pu/</id>
        <link href="https://andychucs.github.io/post/shi-zhi-lei-guan-yu-guang-pan-de-yan-jiu-zai-linux-cao-zuo-xi-tong-shang-ru-he-shi-yong-guang-qu-guang-pan-yu-guang-qu-de-jian-dan-ke-pu/">
        </link>
        <updated>2021-11-25T13:12:28.000Z</updated>
        <summary type="html"><![CDATA[<p>前言：因为工作关系对光盘和光驱做过一些研究，还与HLDS的员工交流过，过了很久决定对之前的一些资料进行整理。以便有需要的朋友翻阅。本文部分关于参数、原理和历史内容来自维基百科。</p>
]]></summary>
        <content type="html"><![CDATA[<p>前言：因为工作关系对光盘和光驱做过一些研究，还与HLDS的员工交流过，过了很久决定对之前的一些资料进行整理。以便有需要的朋友翻阅。本文部分关于参数、原理和历史内容来自维基百科。</p>
<!-- more -->
<h1 id="光盘的简单分类与历史">光盘的简单分类与历史</h1>
<p>抛开专用设备使用的光盘，例如索尼等随身听、游戏机使用的MD、UMD等等专用型光盘。<br>
大致分类如下：</p>
<h2 id="红外激光cd">红外激光：CD</h2>
<p>CD光盘驱动器起始于1974年，由<a href="https://zh.wikipedia.org/wiki/%E8%8D%B7%E8%98%AD">荷兰</a>的<a href="https://zh.wikipedia.org/wiki/%E9%A3%9B%E5%88%A9%E6%B5%A6">飞利浦公司</a>与<a href="https://zh.wikipedia.org/wiki/%E6%97%A5%E6%9C%AC">日本</a>的<a href="https://zh.wikipedia.org/wiki/%E7%B4%A2%E5%B0%BC">Sony</a>合作所发表的<a href="https://zh.wikipedia.org/wiki/%E9%9F%B3%E6%A8%82%E5%85%89%E7%A2%9F">音乐光盘</a>（Audio CD），亦称为<a href="https://zh.wikipedia.org/wiki/CDDA">CD-DA</a>（Compact Disc-Digital Audio）；从此之后，因其它存储媒体市场的发展而连续推出一系列的光盘规格与产品。</p>
<p><strong>影音光盘</strong>（Video Compact Disc；<strong>VCD</strong>），又称影音压缩光盘，是一种在<a href="https://zh.wikipedia.org/wiki/CD">光盘</a>（Compact Disc）上存储<a href="https://zh.wikipedia.org/wiki/%E8%A6%96%E8%A8%8A">视频</a>信息的标准。VCD可以在<a href="https://zh.wikipedia.org/wiki/%E5%80%8B%E4%BA%BA%E9%9B%BB%E8%85%A6">个人电脑</a>和<a href="https://zh.wikipedia.org/w/index.php?title=VCD%E6%92%AD%E6%94%BE%E5%99%A8&amp;action=edit&amp;redlink=1">VCD播放器</a>以及大部分<a href="https://zh.wikipedia.org/wiki/DVD%E6%92%AD%E6%94%BE%E6%A9%9F">DVD播放机</a>中播放，但大部分<a href="https://zh.wikipedia.org/wiki/%E8%97%8D%E5%85%89%E5%85%89%E7%A2%9F">蓝光光盘</a>播放机已不支持VCD。VCD标准由<a href="https://zh.wikipedia.org/wiki/%E7%B4%A2%E5%B0%BC%E5%85%AC%E5%8F%B8">索尼</a>、<a href="https://zh.wikipedia.org/wiki/%E9%A3%9B%E5%88%A9%E6%B5%A6">飞利浦</a>、<a href="https://zh.wikipedia.org/wiki/JVC">JVC</a>、<a href="https://zh.wikipedia.org/wiki/%E6%9D%BE%E4%B8%8B%E9%9B%BB%E5%99%A8">松下电器</a>等电器生产厂商联合于1993年制定，属于数字光盘的<a href="https://zh.wikipedia.org/w/index.php?title=CD%E8%A1%8C%E6%A5%AD%E6%A8%99%E6%BA%96&amp;action=edit&amp;redlink=1">白皮书</a>标准。</p>
<h2 id="红色激光dvd">红色激光：DVD</h2>
<p>DVD原是<strong>D</strong>igital <strong>V</strong>ideo <strong>D</strong>isc（数字视频光盘）的首字母缩略字，因初推出时大多厂商只针对视频方面的宣传及推出产品，而且当时的电脑产业对高容量的存储媒体没有太大需求。后因定位更改，于1995年规格正式确立时，重新定义为<strong>D</strong>igital <strong>V</strong>ersatile <strong>D</strong>isc（数字多用途光盘），但旧称的Digital Video Disc也有人继续沿用。现在一般都只以“DVD”作为其称呼。</p>
<p>尽管比DVD容量更大的<a href="https://zh.wikipedia.org/wiki/BD">BD</a>问世十多年，而且年前出现<a href="https://zh.wikipedia.org/wiki/UHD_BD">UHD BD</a>比早期BD有更高<a href="https://zh.wikipedia.org/wiki/%E6%B8%85%E6%99%B0%E5%BA%A6">清晰度</a>，但至今DVD仍然是主力的一线录播影片的媒体，而DVD没有像<a href="https://zh.wikipedia.org/wiki/VCD">VCD</a>在一问世便落后的问题。主要因为大<a href="https://zh.wikipedia.org/wiki/%E8%9E%A2%E5%B9%95">屏幕</a>的电脑和电视机在使用上的不便而未完全普及，而且BD要直接和在其问世前便在使用的<a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E6%B8%85%E9%9B%BB%E8%A6%96">高清电视</a>竞争，使观众可能观看电视台播放相似质量的同一节目，以及DVD价格不高而仍然拥有相当市场，也方便做一些电视台不重播或网络难有片源的旧节目的市贩媒体。</p>
<h2 id="蓝色激光bd">蓝色激光：BD</h2>
<p>2003年<a href="https://zh.wikipedia.org/wiki/DVD%E8%AE%BA%E5%9D%9B">DVD论坛</a>以8比6通过HD DVD是DVD配合<a href="https://zh.wikipedia.org/wiki/HDTV">HDTV</a>的下一代产品。在此次会议上，他们将碟片改名为“HD DVD”，之前称为“高级光学碟片”。<a href="https://zh.wikipedia.org/wiki/%E8%97%8D%E5%85%89%E5%85%89%E7%A2%9F">蓝光光盘</a>是由DVD论坛之外的企业发展出的，因此未提交至论坛讨论。</p>
<p>HD DVD由<a href="https://zh.wikipedia.org/wiki/%E6%9D%B1%E8%8A%9D">东芝</a>、<a href="https://zh.wikipedia.org/wiki/NEC">NEC</a>、<a href="https://zh.wikipedia.org/wiki/%E4%B8%89%E6%B4%8B%E9%9B%BB%E6%A9%9F">三洋电机</a>等企业组成的<a href="https://zh.wikipedia.org/wiki/HD_DVD%E6%8E%A8%E5%BB%A3%E5%8D%94%E6%9C%83">HD DVD推广协会</a>负责推广，<a href="https://zh.wikipedia.org/wiki/%E6%83%A0%E6%99%AE">惠普</a>（同时支持<a href="https://zh.wikipedia.org/wiki/%E8%97%8D%E5%85%89%E5%85%89%E7%A2%9F">BD</a>）、<a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E8%BB%9F">微软</a>及<a href="https://zh.wikipedia.org/wiki/%E8%8B%B1%E7%89%B9%E7%88%BE">英特尔</a>等相继加入HD DVD阵营，其中的主流片厂<a href="https://zh.wikipedia.org/wiki/%E7%92%B0%E7%90%83%E5%BD%B1%E6%A5%AD">环球影业</a>亦是成员之一。</p>
<p>但在2008年，随着原先支持HD DVD的<a href="https://zh.wikipedia.org/wiki/%E8%8F%AF%E7%B4%8D%E5%85%AC%E5%8F%B8">华纳公司</a>宣布脱离HD DVD，以及美国数家连锁卖场决定支持蓝光产品，东芝公司终在2008年2月19日正式宣布将终止HD DVD事业。</p>
<h1 id="详细的分类与特殊格式">详细的分类与特殊格式</h1>
<p>一个简单而不完全正确的暴论：覆盖99%情况你能看到的在日常使用的光盘只有CD-R、CD-RW、DVD-R、DVD+R、DVD-RW、DVD+RW、DVD-RAM、BD-R、BD-RE这几种。<br>
有时候你可能会看到诸如Audio CD、CD-Text、CDDA、CD-Extra、CD-i、CD-ROM、DVD-Video、DVD-ROM等等看起来很复杂没见过的描述，实际上这些光盘要么是一些特殊标准（比如某些唱片要使用特别的格式，或者要在CD里添加封面和歌词的“分区”），要么是根据刻录内容不同的不同功能划分。一部分特殊光盘除了可以从旧货市场里找到，还可以自己从空白光盘刻录。<br>
最常用的莫过于CD-ROM、DVD-ROM，简而言之又不完全正确：它们都是基于CD-R、DVD-R的空白光盘刻录数据后的名称，往往会把刻录成数据光盘的叫做ROM，而刻录音频镜像的叫做Audio CD（现在的CD唱片大多是这样），刻录影片的叫DVD-Video、BDMV。通过特定文件格式制作刻录的光盘，与数据光盘直接刻录文件不同，光盘会记录分片数据，DVD-Video影片光盘会存在可交互的菜单，BDMV为蓝光版的DVD-Video，其目录格式不同，刻录数据内容也更丰富。在电脑或播放器上使用的方法有很大差异，ROM就像是不能写入的U盘，DVD-Video影片光盘、Audio CD唱片光盘、BDMV影片光盘这些要通过专用的播放器播放，直接打开驱动器你只会得到一堆你看不明白的文件和目录。正版CD唱片都会有唯一的编号，专用的播放器打开可以从网络上获取到专辑封面哦，比如iTunes和Linux上的goobox。</p>
<h2 id="dvd">DVD</h2>
<p>再说回分类，一般情况，现在大部分DVD光驱支持三大标准：+、RAM、-。在商品页一般情况标注的速度指DVD最大刻录速度，非刻录机则表示读取速度。下面是某LG光驱的商品spec。<br>
<img src="https://andychucs.github.io/post-images/1637848860738.png" alt="某LG光驱的商品spec" loading="lazy"><br>
DVD光盘标准主要分两种，+和-。<br>
“-”标准由DVD论坛设立制定的格式有DVD-R、DVD-RW和DVD-RAM。DVD论坛的创始成员有<a href="https://zh.wikipedia.org/wiki/%E6%9D%B1%E8%8A%9D">东芝</a>、<a href="https://zh.wikipedia.org/wiki/%E6%9D%BE%E4%B8%8B">松下</a>、<a href="https://zh.wikipedia.org/wiki/%E7%B4%A2%E5%B0%BC">索尼</a>、<a href="https://zh.wikipedia.org/wiki/%E4%B8%89%E8%8F%B1">三菱</a>、<a href="https://zh.wikipedia.org/wiki/%E6%97%A5%E7%AB%8B">日立</a>、<a href="https://zh.wikipedia.org/wiki/%E5%85%88%E9%8B%92%E5%85%AC%E5%8F%B8">先锋</a>、<a href="https://zh.wikipedia.org/wiki/JVC">JVC</a>、<a href="https://zh.wikipedia.org/wiki/%E9%A3%9B%E5%88%A9%E6%B5%A6">飞利浦</a>、<a href="https://zh.wikipedia.org/wiki/%E6%B1%A4%E5%A7%86%E9%80%8A">汤姆逊</a>、<a href="https://zh.wikipedia.org/wiki/%E6%99%82%E4%BB%A3%E8%8F%AF%E7%B4%8D">时代华纳</a>共10家。<br>
“+”标准由DVD+RW联盟制定，由于DVD-RAM的缺点和兼容性不佳，索尼、飞利浦、三菱、理光等公司组成了这个联盟，推出了DVD+R、DVD+RW、DVD+R DL。<br>
在DVD+R标准下还存在一个变种，由Millennial公司发明的一次性写入技术M-DISC，或千年光盘，有DVD和蓝光两种类，在2016年12月，Millenniata公司正式破产。需要特定的光驱来刻录M-DISC，例如<a href="https://zh.wikipedia.org/wiki/LG">LG</a>，<a href="https://zh.wikipedia.org/wiki/%E8%8F%AF%E7%A2%A9">华硕</a>和<a href="https://zh.wikipedia.org/wiki/%E5%85%89%E5%AF%B6%E7%A7%91%E6%8A%80">光宝科技</a>生产的光驱均可以刻录M-DISC。<a href="https://zh.wikipedia.org/wiki/%E9%8C%B8%E5%BE%B7%E7%A7%91%E6%8A%80">铼德科技</a>则生产及出售M-DISC。Verbatim亦生产联合品牌的光盘，名为“Verbatim M-DISC”。</p>
<h3 id="关于可擦写dvd">关于可擦写DVD</h3>
<p>以DVD-RAM/+RW为代表的可擦写光盘可以一般磁盘的方式进行文件存取使用，无需每次更改时进行擦除刻录，前提是需要将光盘格式化为UDF、ext、HFS等格式，你大可以将其视为U盘。</p>
<h3 id="极富特点又难用的dvd-ram">极富特点又难用的DVD-RAM</h3>
<p>观看DVD-RAM的盘面你就会发现很大的不同，DVD-RAM往往是金色盘面上刻有很多竖线，这标志着它与众不同的原理。但是就本人实际体验的结论是不如DVD+RW，索尼NB。</p>
<p>DVD-RAM(DVD-Random Access Memory)是一种相对特殊的光盘规格，其设计用意 在于资料存储、备份等，同时因为可重写次数的理论值较其他可重写 DVD 规格为高，以及 文件存储的格式更具灵活性。DVD-RAM 的文件存储规格与电脑硬盘及软盘技术相似，资料 均存储于多条同轴心的资料轨(等线速)，随机存取方式与硬盘和磁盘相同，相对于 DVD- RW 及 DVD+RW 以单一螺旋轨存储资料(等角速)，读写时需要依赖特别的数据包读写程 序。</p>
<p>在 DVD-RAM 的使用上，尤其需要注意文件系统与操作系统的兼容性，目前常见的操 作系统仅有 Windows 可以对 DVD-RAM 进行 UDF 文件系统的格式化，其他常用操作系统 如 Linux 允许将 DVD-RAM 格式化为其支持的文件系统，如 ext3/4，macOS 在新版本取消 了对 UDF 文件系统的支持，且不提供光盘格式化的 GUI，只能通过 CLI 进行 HFS+文件系 统格式化后才能使用。故如果需要在 Linux 系统之间交换资料需要将 DVD-RAM 格式化为 ext4/3 文件系统，如果要在 Windows 与 Linux 之间交换资料需要格式化为 UDF 文件系统。</p>
<h2 id="cd">CD</h2>
<p>对于CD的话除了特别的唱片，一般只关注大小两种尺寸的CD-R和CD-RW，这里不多做解释。</p>
<h1 id="在linux上检查光驱和光盘信息的一些方法">在Linux上检查光驱和光盘信息的一些方法</h1>
<pre><code>dmesg | egrep -i 'DVD|CD-ROM'
lshw | grep -i cdrom -A 20
hwinfo | grep -i CD-ROM -A 30
cat /proc/sys/dev/cdrom/info
</code></pre>
<h1 id="未完待续">未完待续</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux系统如何将AMD显卡驱动从Radeon更换为amdgpu]]></title>
        <id>https://andychucs.github.io/post/linux-xi-tong-ru-he-jiang-amd-xian-qia-qu-dong-cong-radeon-geng-huan-wei-amdgpu/</id>
        <link href="https://andychucs.github.io/post/linux-xi-tong-ru-he-jiang-amd-xian-qia-qu-dong-cong-radeon-geng-huan-wei-amdgpu/">
        </link>
        <updated>2021-10-17T10:09:14.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>打开 <code>/etc/modprobe.d/blacklist.conf</code></li>
<li>新增一行： <code>blacklist radeon</code> 保存</li>
<li>运行 <code>sudo update-initramfs -u -k all</code></li>
<li>新建<code>/etc/modprobe.d/amdgpu.conf</code></li>
<li>填入以下内容<pre><code>options amdgpu si_support=1

options amdgpu cik_support=1
</code></pre>
</li>
<li>新建 <code>/etc/modprobe.d/radeon.conf</code></li>
<li>填入以下内容<pre><code>options radeon si_support=0

options radeon cik_support=0
</code></pre>
</li>
<li>reboot 重启</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[全国医院数据-中国医疗保险网爬虫]]></title>
        <id>https://andychucs.github.io/post/quan-guo-yi-yuan-shu-ju-zhong-guo-yi-liao-bao-xian-wang-pa-chong/</id>
        <link href="https://andychucs.github.io/post/quan-guo-yi-yuan-shu-ju-zhong-guo-yi-liao-bao-xian-wang-pa-chong/">
        </link>
        <updated>2020-05-07T02:41:10.000Z</updated>
        <content type="html"><![CDATA[<p>先上<a href="https://github.com/AndyZhuAZ/hospital-crawler-CN">项目地址</a></p>
<h2 id="格式说明">格式说明</h2>
<p>输出格式为csv，表头为：医院名称,省份,城市,医院等级,擅长病症,医院地址,医院电话,医院邮箱,医院网站。</p>
<h2 id="网站解析">网站解析</h2>
<p>网址的page参数是页数，k1到k3分别是省份、等级、重点科室。k4不知道是干什么的，还有一个title参数用来搜索。我要爬取全部医院所以只需要遍历爬取全部页数的网页即可。<br>
https://www.zgylbx.com/index.php?m=content&amp;c=index&amp;a=lists&amp;catid=106&amp;page=1&amp;k1=&amp;k2=&amp;k3=&amp;k4=<br>
网页结构如图，医院列表装在&lt;table&gt;标签里，第零行是表头，之后的奇数行是基本信息，偶数行是医院地址,医院电话,医院邮箱,医院网站。<br>
<img src="https://andychucs.github.io/post-images/1588826502675.png" alt="" loading="lazy"></p>
<h2 id="代码说明">代码说明</h2>
<p>打开csv文件，writerows的参数是每一行的数据，列表嵌套结构，输入crawler函数返回的数据。</p>
<pre><code class="language-python">if __name__ == '__main__':
    url, headers = init()
    with open('hospital.csv', 'a') as f:
        write = csv.writer(f)
        write.writerows(crawler(url, headers))
</code></pre>
<p>crawler函数先设置表头，然后遍历全部页面，将解析成list的数据添加到rows，最后返回rows。</p>
<pre><code class="language-python">def crawler(u, h):
    rows = [[&quot;医院名称&quot;, '省份', '城市', &quot;医院等级&quot;, '擅长病症', '医院地址', '医院电话', '医院邮箱', '医院网站']]
    for i in range(1, 1530):
        r = requests.get(str(u) + str(i) + &quot;&amp;k1=0&amp;k2=0&amp;k3=0&amp;k4=&quot;, headers=h, timeout=20)
        print('url:'+str(u) + str(i) + &quot;&amp;k1=0&amp;k2=0&amp;k3=0&amp;k4=&quot;)
        soup = BeautifulSoup(r.text, &quot;html.parser&quot;)
        message = soup.find_all('tr')
        rows.extend(get_rows(message))
    return rows
</code></pre>
<p>get_rows函数将每一页的数据解析成一个list，从索引1开始遍历，设置一个flag确定当前行的类型，医院详细信息是写在一个标签里用br标签隔开的，所以手动分割一下。</p>
<pre><code class="language-python">def get_rows(msg):
    row_list = []
    row = []
    sub_row = False
    for line in msg[1:]:
        data = line.find_all('td')
        if not sub_row:
            prov_city = data[1].text.strip().split('-')
            row = [
                data[0].text,
                prov_city[0],
                prov_city[1],
                data[2].text,
                data[3].text
            ]
            sub_row = True
        else:
            data = str(data[0]).split('&lt;br/&gt;')
            add = data[0].strip().split('医院地址:')[-1]
            tel = data[1].strip().split('医院电话:')[-1]
            mail = data[2].strip().split('医院邮箱:')[-1]
            site = data[3].strip().split('医院网站:')[-1][:-5]
            row.extend([add, tel, mail, site])
            row_list.append(row)
            sub_row = False
    return row_list
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[像Python一样使用Dart（一）：列表生成 List comprehension]]></title>
        <id>https://andychucs.github.io/post/xiang-python-yi-yang-shi-yong-dartyi-lie-biao-sheng-cheng-list-comprehension/</id>
        <link href="https://andychucs.github.io/post/xiang-python-yi-yang-shi-yong-dartyi-lie-biao-sheng-cheng-list-comprehension/">
        </link>
        <updated>2020-05-02T15:59:24.000Z</updated>
        <content type="html"><![CDATA[<p>Dart语言里，列表生成的一般方式是使用List的generate构造函数：</p>
<pre><code class="language-dart">new List&lt;int&gt;.generate(3, (int index) =&gt; index * index); // [0, 1, 4]
</code></pre>
<p>又是匿名函数又是胖箭头，看起来很不优雅。<br>
既然Dart被称为Python+Java/Kotlin，Python那样的列表生成表达式也是有的：</p>
<pre><code class="language-python">[i*i for i in range(0,3)] #python
</code></pre>
<pre><code class="language-dart">[for (var i = 0; i &lt; 3; i+=1 ) i*i]
</code></pre>
<p>如果需要枚举的对象是LIst和Set，还可以用for-in迭代，看起来更像了：</p>
<pre><code class="language-dart">[for (var i in [0,1,2] ) i*i]
</code></pre>
<p>使用这种写法需要<a href="https://dart.cn/tools/diagnostic-messages#sdk_version_ui_as_code">Dart 2.3.0</a>，在Flutter项目中，需要更改pubspec.yaml：</p>
<pre><code class="language-yaml">environment:
  sdk: &quot;&gt;=2.2.2 &lt;3.0.0&quot;
# 这里是AndroidStudio自动修改的，似乎最低版本大于等于2.2.0即可。
</code></pre>
]]></content>
    </entry>
</feed>